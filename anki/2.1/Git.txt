#separator:tab
#html:true
"Команда для&nbsp;создания <i>Git</i>-репозитория:

"	
"Команда для&nbsp;конфигурации <i>Git</i>-репозитория:

"	
"Уровни конфигурации git-репозитория

"	
"Команда для удаление параметра конфигурации <i>Git</i>-репозитория:

"	
"Формат команды конфигурации Git-репозитория:

"	
"Команда для удаление секции параметров конфигурации <i>Git</i>-репозитория:

"	
"Команда для конфигурации почты пользователя (значение - <i>kimdaniiell@gmail.com</i>):

"	
"Команда для конфигурации логина пользователя (значение - <i>KIMdaniiell</i>):

"	
"Какой уровень конфигурации используется по-умолчанию при использовании команды <i>git config&nbsp;</i>?

"	
"Команда для простмотра параметров конфигурации Git-репозитория?

"	
"Команда для создания алиаса <i>`<span style=""white-space: pre-wrap;"">sayhello</span>`</i> уровня пользователя&nbsp;для вывода <i>`<span style=""color: var(--color-prettylights-syntax-string); white-space: pre-wrap;"">hello</span>`</i> в консоль:

"	
Описать двуступенчатую систему коммитов	<ol><li>При создании нового файла в&nbsp;<em>рабочем дереве</em>&nbsp;Git посчитает его неотслеживаемым (<strong><em>untracked</em></strong>)<br>и такие изменения&nbsp;<strong>НЕ</strong>&nbsp;попадают из&nbsp;<em>рабочего дерева</em>&nbsp;в&nbsp;<em>репозиторий</em>&nbsp;напрямую.</li><li>Вместо этого изменения сначала регистрируются в&nbsp;<em><strong>индексе</strong></em>&nbsp;(<em>индексация</em>).<br>Это можно рассматривать как способ&nbsp;<em>«подтверждения»</em>&nbsp;изменений перед совершением&nbsp;<em>коммита</em>.<br>После попадания в&nbsp;<em>индекс</em>&nbsp;файлы становятся подготовленными к коммиту (<strong><em>staged</em></strong>):</li><li>Все подготовленные изменения или их часть можно закомитить в&nbsp;<em>репозиторий</em>.</li></ol>
"Как называются неослеживаемые файлы в <i>Git</i>?

"	
"Как называются файлы в <i>Git</i> с изменениями, подготовленные к коммиту?

"	
"Команда для просмотра изменений в <i>Git</i>-репозитории

"	
Что в выводе <i>git staus</i>?	<div>Отображаемая информация:</div><ul><li>Текущая&nbsp;<em>ветка</em>&nbsp;;</li><li><strong>Changes to be committed</strong>&nbsp;- файлы находятся в индексе, т.е. подготовленные для следующего коммита;<br>(файлы в&nbsp;<em>индексе</em>&nbsp;и в&nbsp;<em>HEAD</em>-коммите не синхронизированы)</li><li><strong>Changes not staged for commit</strong>&nbsp;- файлы в&nbsp;<em>рабочем дереве</em><br>не синхронизированые либо с&nbsp;<em>репозиторием</em>, либо с&nbsp;<em>индексом</em>,<br>т.е. их последняя версия не была проиндексирована ;</li><li><strong>Untracked files</strong>&nbsp;- файлы в&nbsp;<em>рабочем дереве</em>&nbsp;которые Git не отслеживает,<br>т.е. о которых не знает ни&nbsp;<em>репозиторий</em>, ни&nbsp;<em>индекс</em>;</li></ul>
Какие файлы относятся к категории <i>`Changes to be committed`</i> в выводе команды <i>git status</i>?	<ul><li><strong>Changes to be committed</strong>&nbsp;- файлы находятся в индексе, т.е. подготовленные для следующего коммита;<br>(файлы в&nbsp;<em>индексе</em>&nbsp;и в&nbsp;<em>HEAD</em>-коммите не синхронизированы)</li></ul>
Какие файлы относятся к категории&nbsp;<i>`Changes not staged for commit`</i>&nbsp;в выводе команды&nbsp;<i>git status</i>?	<ul><li><strong>Changes not staged for commit</strong>&nbsp;- файлы в&nbsp;<em>рабочем дереве</em><br>не синхронизированые либо с&nbsp;<em>репозиторием</em>, либо с&nbsp;<em>индексом</em>,<br>т.е. их последняя версия не была проиндексирована ;</li></ul>
Какие файлы относятся к категории&nbsp;<i>`Untracked files`</i>&nbsp;в выводе команды&nbsp;<i>git status</i>?	<ul><li><strong>Untracked files</strong>&nbsp;- файлы в&nbsp;<em>рабочем дереве</em>&nbsp;которые Git не отслеживает,<br>т.е. о которых не знает ни&nbsp;<em>репозиторий</em>, ни&nbsp;<em>индекс</em>;</li></ul>
"Команда для индексирования изменений:

"	
Назначение флага <b>--force </b>команды <i>git add</i>:	Позволяет игнорировать предупреждения и обходить <i>`.gitignore`</i>
"Какой флаг команды <i>git add</i> позволяет индексировать изменения пофрагментно (<i>интерактивный режим</i>)?

"	
Назначение флага <b>--patch</b>&nbsp;команды <i>git add:</i>	Позволяет индексировать изменения в файле пофрагментно (y/n/s/...)
Назначение флага&nbsp;<b>-p</b>&nbsp;команды&nbsp;<i>git add:</i>	Позволяет индексировать изменения в файле пофрагментно (y/n/s/...) ;
"Команда для индексирования сразу <b>всех&nbsp;</b>модифицированных файлов&nbsp;<i>Git</i>-репозитория:

"	
Назначение флага <b>--all</b>&nbsp;команды&nbsp;<i>git add?</i>	Позволяет проиндексировать все файлы проекта, кроме тех, что указаны в <i>`.gitignore`</i>
Назначение флага&nbsp;<b>-A</b>&nbsp;команды&nbsp;<i>git add?</i>	Позволяет проиндексировать все файлы проекта,кроме тех, что указаны в <i>`.gitignore`</i>
"Формат команды для индексирования изменений в <i>Git</i>-репозитории:

"	
Что будет если вызвать команду `<i>git add</i>` (без аргументов) ?	"<b>Nothing specified, nothing added.</b><br><i>hint: Maybe you wanted to say 'git add .'?<br>hint: Turn this message off by running<br>hint: ""git config advice.addEmptyPathspec false""</i>"
Что будет если указать директорию в <i>git add</i>?	"<span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">При указании&nbsp;</span><strong>директории</strong><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;в&nbsp;</span><code>git add</code><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;в&nbsp;</span><em>индекс</em><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;добавятся&nbsp;</span><strong>все</strong><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;содержащиеся в ней файлы ;</span>"
Что делать, если нужно проиндексировать директорию, но в ней есть лишние файлы?	<ul><li>При указании&nbsp;<strong>директории</strong>&nbsp;в&nbsp;<code>git add</code>&nbsp;в&nbsp;<em>индекс</em>&nbsp;добавятся&nbsp;<strong>все</strong>&nbsp;содержащиеся в ней файлы ;<ul><li>Чтобы Git не учитывал&nbsp;<strong>лишние</strong>&nbsp;файлы, их следует перечислить в&nbsp;<code>.gitignore</code>&nbsp;в корне проекта ;</li></ul></li></ul>
Что будет если создать директорию и указать ее в <i>git add</i>?	<ul><li>Git не умеет работать с&nbsp;<strong>пустыми директориями</strong>&nbsp;;<ul><li>Чтобы добавить пустую директорию можно предварительно создать в ней пустой файл<br>(обычно его называют&nbsp;<code>.gitkeep</code>) ;</li></ul></li></ul>
Алгоритм удаления файла из <i>git</i>-репозитория	"<span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">Команда&nbsp;</span><code>git rm *file*</code><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;делает то же, что и последовательность&nbsp;</span><code>rm *file*</code><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;и&nbsp;</span><code>git add *file*<br></code><ul><li>Неочевидно то, что если файл в&nbsp;<em>рабочей директории</em>&nbsp;был удален, то это также нужно проиндексировать командой&nbsp;<code>git add</code>;</li></ul>"
Назначение флага <b>--force</b> команды <i>git rm</i>:	Позволяет игнорировать предупреждения и удалять модифицированные файлы, которые не сохранены в репозитории (т.е. без возможности эти изменения восстановить) ;
Что будет если попытаться удалить модифицированные файлы из <i>git</i>-репозитория?	Если удалить из рабочего дерева с помощью <i>`rm`</i>, то потом факт удаления нужно будет проиндексировать.<br><br>С помощью <i>`git rm`</i> не получится - высветится предупреждение.<br>Для этого нужно использвать команду <i>git rm</i> с флагом <b>--force</b>.
"Команда для удаления директории рекурсивно:

"	
Назначение флага&nbsp;<i>-r </i>команды <i>git rm</i>?	Рекурсивное удаление директорий
"Команда для удаления файла из индекса:

"	
Назначение флага <b>--cashed</b>&nbsp;команls <i>git rm</i>:	Удаление только на уровне индекса (в рабочей директории файл сохраняется)
Какая последовательность команд делает то же самое, что <i>git rm</i>?	"<span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">Команда&nbsp;</span><code>git rm *file*</code><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;делает то же, что и последовательность&nbsp;</span><code>rm *file*</code><span style=""color: rgb(31, 35, 40); background-color: rgb(255, 255, 255);"">&nbsp;и&nbsp;</span><code>git add *file*</code>"
"Команда для переименовывания файлов в <i>Git</i>-репозитории:

"	
"Команда для перемещения файлов в <i>Git</i>-репозитории:

"	
Назначение флага <b>--force</b> команды <i>git mv</i>:	Позволяет игнорировать предупреждения и пререименовывать/перемещать файлы даже если такой таргет уже существует&nbsp;
"Формат команды для перемещения файлов в <i>Git</i>-репозитории:

"	
"Формат команды для переименования файлов в&nbsp;<i>Git</i>-репозитории:

"	
Какая последовательность команд делает то же самое, что <i>git mv</i>?	<ul><li>Команда&nbsp;<code>git mv *file1* *file2*</code>&nbsp;делает то же, что и последовательность&nbsp;<code>cp *file1* *file2*</code>,&nbsp;<code>git rm *file1*</code>&nbsp;и&nbsp;<code>git add *file2*</code>&nbsp;;</li></ul>
"Команда для создания коммита:

"	
Назначение флага <b>--all</b> команды <i>git commit</i>:	Позволяет коммитить изменения пропуская стадию индексации, т.е. выполняет <b><i>git add</i>&nbsp;</b>и <b><i>git rm</i></b>&nbsp;для всех измененных файлов вместо пользователя <br>(относится к тем файлам, о которых знает Git - т.е. для операций модификации и удаления файлов) ;
"Команда для коммиста&nbsp;<span style=""white-space: pre-wrap;"">всех измененных файлов с </span><span style=""white-space: pre-wrap;"">пропуском стадии индексации:</span>

"	
Назначение флага <b>--amend</b> команды <i>git commit</i>:	Позволяет перезаписать последний коммит в ветке
"Команда для перезаписи последнего коммита в ветке:

"	
"Команда для коммита конкретного модифицированного файла:

"	
Что будет при вызове команды git commit с конкретным файлом?	<ul><li>При указании файлов в конце, они закоммитятся:<ul><li>это произойдет даже если они не были проиндексированны ;</li><li>причем остальные изменения не пропадут и останутся проиндексированными<br>и их можно будет применить потом с помощью обычного&nbsp;<code>git commit</code><br>(помогает управлять порядком изменений) ;</li></ul></li></ul>
"Команда для просмотра объектов:

"	
"Команда для просмотра информации о последнем коммите:

"	
"Команда для просмотра информации о предпоследнем коммите:

"	
"Команда для просмотра информации о предпредпоследнем коммите:

"	
"Команда для просмотра&nbsp;<span style=""white-space: pre-wrap;"">содержания конкретного файла на момент определённого коммита:</span>

"	
Что будет при выполнении команды `<i>git show</i>&nbsp;<i>коммит:путь</i><b>` ?</b>	Покажет содержание конкретного файла на момент определённого коммита
Что будет при вызове команды `<i>git show @~3:2</i>`?	Выведется состояние файла <b>`2`</b>&nbsp;на момент предпоследнего коммита
Команда для просмотра истории <i>Git</i>-репозитория:	<i>git</i> <b>log</b>
"Как посмотреть историю проекта до конкретного коммита?

"	
Что будет при вызове команды `<i>git log коммит</i>`?	Выведется история репозитория до указанного коммита
Какими свойствами должен обладать хороший коммит?	<ul><li><h3>Атомарность</h3></li><li><div><h3>Консистентность</h3></div></li></ul>
Что означает свойство коммитов - <b>атомарность</b>?	Каждый коммит должен делать только одну вещь ;<br>(типы коммита из <i>Conventional Commits</i>)
"Как называется свойство коммитов, говорящее о том, что каждый коммит должен делать только одну вещь?

"	
Что означает свойство коммитов - <b>консистентность</b>?	Каждый коммит должен быть логически завершенным изменением проекта, и после него ничего не должно сломаться ;<br>(<i>пример с изменением объявления функции и ее вызовом в зависимых модулях</i>)
"Как называется свойство коммитов, говорящее о том, что каждый коммит должен быть логически завершенным изменением проекта, и после него ничего не должно сломаться?

"	
Какую структуру должен иметь хороший коммит согласно&nbsp;<i><b>Conventional Commits</b></i>?	"<span style=""background-color: rgb(0, 0, 255);""></span><span style=""color: rgb(0, 0, 255);"">&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;</span><br style=""color: rgb(0, 0, 255);""><br style=""color: rgb(0, 0, 255);""><span style=""color: rgb(0, 0, 255);"">&lt;optional body&gt;</span><br style=""color: rgb(0, 0, 255);""><br style=""color: rgb(0, 0, 255);""><span style=""color: rgb(0, 0, 255);"">&lt;optional footer(s)&gt;<br></span><ul><li><strong>Заголовок</strong>&nbsp;коммита состоит из&nbsp;<strong>типа</strong>&nbsp;коммита и&nbsp;<strong>описания</strong>&nbsp;в повелительном наклонении без знака препинания на конце.<ul><li>Заголовок коммита не более 50 символов</li></ul></li><li>В&nbsp;<strong>теле</strong>&nbsp;коммита конкретизируется проблема, кратко описывается, что было изменено и почему.<ul><li>Ширина тела коммита не более 72 символов</li></ul></li><li><strong>Нижний колонтитул</strong>&nbsp;следует использовать для указания внешних ссылок, контекста коммита или другой мета информации.</li></ul>"
Какова спецификация изменений в коммитах типа <b>build</b>?	Сборка проекта или изменения внешних зависимостей
Какова спецификация изменений в коммитах типа <b>ci&nbsp;</b>?	Настройка CI и работа со скриптами
Какова спецификация изменений в коммитах типа <b>docs&nbsp;</b>?	Обновление документации
Какова спецификация изменений в коммитах типа&nbsp;<b>feat&nbsp;</b>?	Добавление нового функционала
Какова спецификация изменений в коммитах типа <b>fix&nbsp;</b>?	Исправление ошибок
Какова спецификация изменений в коммитах типа <b>perf&nbsp;</b>?	Изменения направленные на улучшение производительности
Какова спецификация изменений в коммитах типа <b>refactor&nbsp;</b>?	Правки кода без исправления ошибок или добавления новых функций
Какова спецификация изменений в коммитах типа <b>revert&nbsp;</b>?	Откат на предыдущие коммиты
Какова спецификация изменений в коммитах типа <b>style&nbsp;</b>?	Правки по кодстайлу (табы, отступы, точки, запятые и т.д.)
Какова спецификация изменений в коммитах типа <b>test&nbsp;</b>?	Добавление тестов
"К какому типу относится коммит, специфика изменений которого <b>""Сборка проекта или изменения внешних зависимостей""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Настройка CI и работа со скриптами""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Обновление документации""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Добавление нового функционала""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Исправление ошибок""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Изменения направленные на улучшение производительности""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Правки кода без исправления ошибок или добавления новых функций""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Откат на предыдущие коммиты""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Правки по кодстайлу (табы, отступы, точки, запятые и т.д.)""</b>?&nbsp;

"	
"К какому типу относится коммит, специфика изменений которого&nbsp;<b>""Добавление тестов""</b>?&nbsp;

"	
"Команда для просмотра информации о последнем коммите, в заголовке которого есть слово&nbsp;<code>user</code>:

"	
